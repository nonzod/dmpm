<?php

/**
 * @file
 * Contains hook implementations for myportal_group module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\myaccess\GroupManagerInterface;
use Drupal\myportal_group\Access\MyPortalGroupAccessCheck;
use Drupal\myportal_group\Access\MyPortalGroupAccessResult;
use Drupal\myportal_group\Plugin\Field\FieldWidget\MyPortalGroupSelectorWidget;
use Drupal\node\NodeInterface;
use Drupal\search_api\Plugin\views\query\SearchApiQuery;
use Drupal\user\UserInterface;
use Drupal\user\UserStorageInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function myportal_group_theme($existing, $type, $theme, $path) {
  $templates_base_path = $path . '/templates';
  return [
    'myportal_group__checkboxes' => [
      'render element' => 'elements',
      'base hook' => 'checkboxes',
      'path' => $templates_base_path . '/form',
    ],
    'myportal_group__form_element' => [
      'render element' => 'elements',
      'base hook' => 'form_element',
      'path' => $templates_base_path . '/form',
    ],
    'myportal_group__details' => [
      'render element' => 'elements',
      'base hook' => 'details',
      'path' => $templates_base_path,
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function myportal_group_theme_suggestions_checkboxes_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#parents']) &&
    ($variables['element']['#parents'][0] === 'groups' || $variables['element']['#parents'][0] === 'field_application_access')) {
    $suggestions[] = 'myportal_group__checkboxes';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function myportal_group_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] === 'checkbox'
    && isset($variables['element']['#ajax']['callback'])
    && $variables['element']['#ajax']['callback'] === 'Drupal\myportal_group\Plugin\Field\FieldWidget\MyPortalGroupSelectorWidget::validateGroupSelection') {
    $suggestions[] = 'myportal_group__form_element';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function myportal_group_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#parents']) &&
    ($variables['element']['#parents'][0] === 'groups' || $variables['element']['#parents'][0] === 'field_application_access')) {
    $suggestions[] = 'myportal_group__details';
  }
}

/**
 * Implements hook_field_info_alter().
 */
function myportal_group_field_info_alter(array &$info): void {
  if (isset($info['groups'])) {
    $info['groups']['default widget'] = 'myportal_group_selector_widget';
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function myportal_group_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entity_type): void {
  $entity_types = ['node'];
  if (isset($fields['groups']) && in_array($entity_type->id(), $entity_types)) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
    $fields['groups']->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
  }
}

/**
 * Implements hook_form_alter().
 */
function myportal_group_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (isset($form['field_content_visibility']['widget']) &&
    in_array($form_id, MyPortalGroupAccessCheck::NODE_FORM_IDS, TRUE)) {

    $default_value = $form['field_content_visibility']['widget']['#default_value'];
    $allowed = array_keys(MyPortalGroupAccessCheck::getAllowedVisibilityOptions(''));
    if (!in_array($default_value, $allowed, TRUE)) {
      $form['field_content_visibility']['widget']['#default_value'] = MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP;
    }

    if(in_array($form_id, MyPortalGroupAccessCheck::NODE_CREATE_FORM_IDS, TRUE)) {
      $no_default_roles = [
        'administrator'
      ];
      $current_user = \Drupal::currentUser();
      $user_roles = $current_user->getRoles();
      $result = array_intersect($no_default_roles, $user_roles);
      if ( empty($result) ) {
        $form['field_content_visibility']['widget']['#default_value'] = MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP_ALL;
        $form['field_content_visibility']['widget']['#attributes']['disabled'] = 'disabled';
      }
    }

    unset($form['field_content_visibility']['widget']['#options']['public'],
      $form['field_content_visibility']['widget']['#options']['community']);
  }

  /** @var \Drupal\Core\Entity\EntityForm $formObject */
  $formObject = $form_state->getFormObject();
  if (method_exists($formObject, 'getEntity')) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $formObject->getEntity();

    if ($node !== NULL
      && ($form_id === 'node_' . $node->bundle() . '_edit_form'
        || $form_id === 'node_' . $node->bundle() . '_form')) {
      $form['#attached']['library'][] = 'myportal_group/selector.widget';
    }
  }
}

/**
 * Alter the visibility field within groups.
 *
 * Implements hook_field_widget_form_alter().
 */
function myportal_group_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  $group_type_id = NULL;

  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();

  // Unset the public options on visibility field.
  if ($field_definition->getType() == 'entity_access_field') {
    $element['#default_value'] = MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP;

    $visibility_options = MyPortalGroupAccessCheck::getAllowedVisibilityOptions(
      $group_type_id, NULL, NULL);

    foreach ($visibility_options as $visibility => $allowed) {
      $element[$visibility]['#disabled'] = !$allowed;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function myportal_group_form_node_form_alter(&$form, FormStateInterface $form_state): void {
  if (isset($form['#entity_type'], $form['groups'])
    && $form['#entity_type'] === 'node') {

    // Lets remove the original submit function in favor of this submit.
    foreach ($form['actions']['submit']['#submit'] as $submit_key => $submit_function) {
      if ($submit_function === 'social_group_save_group_from_node') {
        unset($form['actions']['submit']['#submit'][$submit_key]);
      }
    }

    $form['actions']['submit']['#submit'][] = 'myportal_group_save_group_from_node';
  }
}

/**
 * Form submit to save the group from a node form.
 *
 * @param array $form
 *   Node add or node edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function myportal_group_save_group_from_node(array $form, FormStateInterface $form_state): void {
  /** @var \Drupal\Core\Entity\EntityForm $formObject */
  $formObject = $form_state->getFormObject();

  /** @var \Drupal\node\Entity\Node $node */
  $node = $formObject->getEntity();

  // Check if the created node is new or updated.
  $is_new = $form_state->getValue('is_new') ?? FALSE;

  $groups_to_add = [];
  $groups_to_remove = [];

  $selected_groups = MyPortalGroupSelectorWidget::getSelectedGroups($form_state->getValue('groups'));
  foreach ($selected_groups as $new_group) {
    $groups_to_add[$new_group['target_id']] = $new_group['target_id'];
  }

  $original_groups = MyPortalGroupSelectorWidget::getDefaultGroups($form['groups']['widget']['container']);
  if (!empty($original_groups) &&
    $form['#form_id'] === 'node_' . $node->bundle() . '_edit_form') {
    foreach ($original_groups as $original_group) {
      if (!in_array($original_group, $groups_to_add)) {
        $groups_to_remove[$original_group] = $original_group;
      }
    }
  }

  // Now make sure the relevant GroupContent is removed or added.
  $setGroupsForNodeService = \Drupal::service('social_group.set_groups_for_node_service');
  $setGroupsForNodeService->setGroupsForNode($node, $groups_to_remove, $groups_to_add, $original_groups, $is_new);
}

/**
 * Implements hook_node_access().
 */
function myportal_group_node_access(NodeInterface $node, string $op, AccountInterface $account): AccessResult {
  // If the account can bypass all group access, return immediately.
  if ($account->hasPermission('bypass group access')) {
    return AccessResult::allowed();
  }

  if ($op !== 'view') {
    return AccessResult::neutral();
  }

  // Required for translations: the system check if user has visibility to
  // content for determine is can translate it.
  if ($account->id() === $node->getOwnerId()) {
    return AccessResult::allowed();
  }

  try {
    $visibility = $node->get(MyPortalGroupAccessCheck::FIELD_CONTENT_VISIBILITY)
      ->getString();
  }
  catch (\InvalidArgumentException $iae) {
    \Drupal::logger('myportal_group')
      ->warning('Field @field_name does not exists.', ['@field_name' => MyPortalGroupAccessCheck::FIELD_CONTENT_VISIBILITY]);
    return AccessResult::neutral($iae->getMessage());
  }

  if ($visibility === MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP_ALL) {
    return MyPortalGroupAccessResult::allowedIfHasSameGroups($account, $node);
  }

  return MyPortalGroupAccessResult::allowedIfHasGroupsInCommon($account, $node);
}

/**
 * Implements hook_social_group_default_visibility_alter().
 */
function myportal_group_social_group_default_visibility_alter(&$visibility, $group_type_id): void {
  if ($group_type_id === 'flexible_group') {
    $visibility = MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP;
  }
}

/**
 * Implements hook_social_group_allowed_visibilities_alter().
 */
function myportal_group_social_group_allowed_visibilities_alter(array &$visibilities, $group_type_id): void {
  // Reset visibilities.
  $visibilities[MyPortalGroupAccessCheck::CONTENT_VISIBILITY_COMMUNITY] = FALSE;
  $visibilities[MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP] = TRUE;
  $visibilities[MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP_ALL] = TRUE;
}

/**
 * Implements hook_options_list_alter().
 */
function myportal_group_options_list_alter(array &$options, array $context) {
  $field_name = $context['fieldDefinition']->getName();
  if ($field_name !== 'groups' && $field_name !== 'field_application_access') {
    return;
  }

  $current_user = \Drupal::currentUser();
  // Remove _none because is not a valid option.
  unset($options['_none']);

  if (in_array('sitemanager', $current_user->getRoles())) {
    return;
  }

  $group_manager = \Drupal::service('myaccess.group_manager');
  $my_groups = $group_manager->getGroupIdsByUser($current_user);

  if (array_intersect(['editor', 'mylink_admin'], $current_user->getRoles())) {
    $options = array_intersect_key($options, array_flip($my_groups));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function myportal_group_module_implements_alter(array &$implementations, string $hook): void {
  if ($hook === 'form_alter') {
    // Move our hook_field_widget_form_alter() implementation to the end of
    // the list in order to override social_event's one.
    $group = $implementations['myportal_group'];
    unset($implementations['myportal_group']);
    $implementations['myportal_group'] = $group;
  }

  // Remove the entity_access_by_field implementation for node_access.
  if ($hook === 'node_access') {
    unset($implementations['entity_access_by_field']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function myportal_group_form_application_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'myportal_group/selector.widget';
}

/**
 * Implements hook_views_query_alter().
 */
function myportal_group_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  // Alter query for include a filter for group of membership to current user.
  if ($query instanceof SearchApiQuery
    && $query->getIndex()->id() == 'content') {

    $user_storage = \Drupal::entityTypeManager()->getStorage('user');
    assert($user_storage instanceof UserStorageInterface);
    $current_user = \Drupal::currentUser();

    // For each query add use condition for groups membership user.
    $user = $user_storage->load($current_user->id());
    assert($user instanceof UserInterface);

    if ($user->id() == 1) {
      // The user administrator (1) bypass this filter: belongs to too many
      // groups.
      return;
    }

    $fields = $query->getIndex()->getFields();
    if (!isset($fields['groups'])) {
      // The index doesn't have the field groups.
      return;
    }

    $group_manager = \Drupal::service('myaccess.group_manager');
    assert($group_manager instanceof GroupManagerInterface);

    // Retrieve the group ids of user is member.
    $user_groups = $group_manager->getGroupIdsByUser($user);

    // Remove the "global, internal and external" groups.
    $user_groups_to_count = array_diff($user_groups, [1, 118, 432]);

    if (count($user_groups_to_count) <= 0) {
      // If user doesn't member of any group (except Global and Internal or
      // External), no content be show. Maybe an error?!.
      \Drupal::logger('myportal_group')
        ->warning("The user \"@user\" can't view any content in homepage because not member of any group.", [
          '@user' => $current_user->getAccountName(),
        ]);
    }

    foreach ($query->getIndex()->getDatasources() as $datasource) {
      if ($datasource->getEntityTypeId() != 'node') {
        continue;
      }

      // Add condition.
      $query->addCondition('groups', $user_groups, 'IN');
    }

  }
}

/**
 * Implements hook_views_post_execute().
 */
function myportal_group_views_post_execute(ViewExecutable $view) {
  if ($view->id() === 'search' && ($view->current_display === 'page_2' || $view->current_display === 'attachment_1')) {
    // Get all the results for this view.
    $results = $view->result;
    $user = \Drupal::currentUser();

    // This hack is only for user that have these permissions.
    if (!($user->hasPermission('bypass node access')
      || $user->hasPermission('bypass group access'))
    ) {
      return;
    }

    // Filter the results to only show those belonging to groups the user
    // belongs to.
    $filtered_results = array_filter($results, function ($item) use ($user) {
      /** @var \Drupal\node\NodeInterface $node */
      $node = $item->_entity;

      if (!$node->hasField(MyPortalGroupAccessCheck::FIELD_CONTENT_VISIBILITY)) {
        return FALSE;
      }

      $visibility = $node
        ->get(MyPortalGroupAccessCheck::FIELD_CONTENT_VISIBILITY)
        ->getString();

      if ($visibility === MyPortalGroupAccessCheck::CONTENT_VISIBILITY_GROUP_ALL) {
        return MyPortalGroupAccessResult::allowedIfHasSameGroups($user, $node)
          ->isAllowed();
      }

      return MyPortalGroupAccessResult::allowedIfHasGroupsInCommon($user, $node)
        ->isAllowed();
    });

    // Update the view results to only show the filtered results.
    $view->result = array_values($filtered_results);
    $view->pager->updatePageInfo();
  }
}
